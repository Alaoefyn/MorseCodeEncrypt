import tkinter as tk
from tkinter import ttk

# Morse code dictionaries
morse_code_uppercase = {
    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....',
    'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.',
    'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
    'Y': '-.--', 'Z': '--..', '!': '-.-.--', '?': '..--..', '*': '-..-', '_': '..--.-', '>': '.-.-.',
    '<': '-....-', '.': '.-.-.-'
}

morse_code_lowercase = {
    'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',
    'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',
    'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
    'y': '-.--', 'z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
    '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ' ': '/'
}

# Reverse Morse code dictionary for decryption
reverse_morse_code_dict = {**{value: key for key, value in morse_code_uppercase.items()},
                           **{value: key for key, value in morse_code_lowercase.items()}}

class MorseCryptorApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Morse Cryptor")
        self.geometry("400x300")

        # Create notebook (tabbed interface)
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill=tk.BOTH, expand=True)

        # Create encryption page
        self.encryption_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.encryption_frame, text="Encryption")
        self.create_encryption_page()

        # Create decryption page
        self.decryption_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.decryption_frame, text="Decryption")
        self.create_decryption_page()

    def create_encryption_page(self):
        # Encryption widgets
        self.enc_input_label = ttk.Label(self.encryption_frame, text="Enter text to encrypt:")
        self.enc_input_label.pack(pady=10)
        self.enc_input_text = tk.Text(self.encryption_frame, height=5, width=40)
        self.enc_input_text.pack(padx=10)

        self.enc_output_label = ttk.Label(self.encryption_frame, text="OUTPUT:")
        self.enc_output_label.pack(pady=10)
        self.enc_output_text = tk.Text(self.encryption_frame, height=5, width=40, state="disabled")
        self.enc_output_text.pack(padx=10)

        self.enc_button = ttk.Button(self.encryption_frame, text="Encrypt", command=self.encrypt_text)
        self.enc_button.pack(pady=10)
    
    def create_decryption_page(self):
        # Decryption widgets
        self.dec_input_label = ttk.Label(self.decryption_frame, text="Enter text to decrypt:")
        self.dec_input_label.pack(pady=10)
        self.dec_input_text = tk.Text(self.decryption_frame, height=5, width=40)
        self.dec_input_text.pack(padx=10)

        self.dec_output_label = ttk.Label(self.decryption_frame, text="OUTPUT:")
        self.dec_output_label.pack(pady=10)
        self.dec_output_text = tk.Text(self.decryption_frame, height=5, width=40, state="disabled")
        self.dec_output_text.pack(padx=10)

        self.dec_button = ttk.Button(self.decryption_frame, text="Decrypt", command=self.decrypt_text)
        self.dec_button.pack(pady=10)

    def encrypt_text(self):
        input_text = self.enc_input_text.get("1.0", "end-1c")
        encrypted_text = self.encrypt(input_text)
        self.enc_output_text.config(state="normal")
        self.enc_output_text.delete("1.0", tk.END)
        self.enc_output_text.insert("1.0", encrypted_text)
        self.enc_output_text.config(state="disabled")

    def decrypt_text(self):
        input_text = self.dec_input_text.get("1.0", "end-1c")
        decrypted_text = self.decrypt(input_text)
        self.dec_output_text.config(state="normal")
        self.dec_output_text.delete("1.0", tk.END)
        self.dec_output_text.insert("1.0", decrypted_text)
        self.dec_output_text.config(state="disabled")

    def encrypt(self, text):
        encrypted_text = ""
        for char in text:
            if char in morse_code_uppercase:
                morse_char = morse_code_uppercase[char]
                encrypted_text += morse_char.replace('.', 'a').replace('-', 'b') + ' '
            elif char in morse_code_lowercase:
                morse_char = morse_code_lowercase[char]
                encrypted_text += morse_char.replace('.', 'A').replace('-', 'B') + ' '
            else:
                encrypted_text += char + ' '
        return encrypted_text.strip()

    def decrypt(self, encrypted_text):
        words = encrypted_text.split(' / ')
        decrypted_text = ""
        for word in words:
            chars = word.split()
            for char in chars:
                if 'a' in char or 'b' in char:
                    morse_char = char.replace('a', '.').replace('b', '-')
                    decrypted_text += reverse_morse_code_dict[morse_char].upper()
                elif 'A' in char or 'B' in char:
                    morse_char = char.replace('A', '.').replace('B', '-')
                    decrypted_text += reverse_morse_code_dict[morse_char].lower()
                else:
                    decrypted_text += char
            decrypted_text += ' '
        return decrypted_text.strip()

if __name__ == "__main__":
    app = MorseCryptorApp()
    app.mainloop()


